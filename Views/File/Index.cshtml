@using System.Globalization
@model DrawModel

@if (ViewData["Message"] != null)
{
    @* <div class="alert alert-success alert-dismissible" style="margin-top:20px">
        @ViewData["Message"]
    </div> *@
}	
    <div class="container">
        <div class="row pb-2">
            <div class=column">
                <input type="button" class="btn btn-outline-secondary btn-sm mx-1" title="ConvertToCircles" value="Convert Polyline to Circles" onclick="location.href='@Url.Action("PolylineToCircles", "File")'" />
            </div>
            <div class=column">
                <input type="button" class="btn btn-outline-secondary btn-sm mx-1" title="MoveEqual" value="Move Equal Circles To Unique Layers" onclick="location.href='@Url.Action("CirclesToLayers", "File")?doSave=false'" />
            </div>
        </div>

        <div class="row">
            <canvas id="myCanvas" width="800" height="400" class="border">
            </canvas>
        </div>
    </div>
                       
@section Scripts {
    <script>       
        function createOffscreenContext(width, height) {
            var offScreenCanvas = document.createElement('canvas');
            offScreenCanvas.width = width;
            offScreenCanvas.height = height;
            var off_ctx = offScreenCanvas.getContext("2d");
            return off_ctx; // use off_ctx.canvas to get the the context's canvas
        }

        function copyToOnScreen(offScreenCanvas) {
            var onScreenCanvas = document.getElementById('myCanvas');
            var onScreenContext = onScreenCanvas.getContext("2d");
            var onScreenCanvasWidth = onScreenCanvas.width;
            var onScreenCanvasHeight = onScreenCanvas.height;            
            onScreenContext.drawImage(offScreenCanvas, 0, 0);
        }        

        @* https://stackoverflow.com/questions/7812514/drawing-a-dot-on-html5-canvas *@
        function drawPixel(imgData, canvasWidth, x, y, r, g, b, a) {
            var index = (x + y * canvasWidth) * 4;
            imgData.data[index + 0] = r;
            imgData.data[index + 1] = g;
            imgData.data[index + 2] = b;
            imgData.data[index + 3] = a;
        }
        
        function draw(scale, translatePos) {

            @* get on-screen canvas *@
            var canvas = document.getElementById('myCanvas');
            var ctx = canvas.getContext("2d");
            var canvasWidth = canvas.width;
            var canvasHeight = canvas.height;            

            @* create off-screen canvas to draw pixels on *@
            @* https://stackoverflow.com/questions/48858220/javascript-put-image-data-on-top-of-canvas *@
            var off_ctx = createOffscreenContext(canvasWidth, canvasHeight);
            var imgData = off_ctx.createImageData(canvasWidth, canvasHeight);     

            // clear
            ctx.clearRect(0, 0, canvasWidth, canvasHeight);

            ctx.save();
            ctx.translate(translatePos.x, translatePos.y);
            ctx.scale(scale, scale);

            @if (Model != null) {            
                <text>       
                @* drawing circles *@
                ctx.beginPath(); // begin
                @foreach (var canvas in Model.Circles)
                {
                    <text>
                        var startAngle = 0;
                        var endAngle = 2 * Math.PI;
                        var x = @canvas.Center.X.ToString(CultureInfo.InvariantCulture);
                        var y = @canvas.Center.Y.ToString(CultureInfo.InvariantCulture);
                        var radius = @canvas.Radius.ToString("N", CultureInfo.InvariantCulture);
                        
                        ctx.moveTo(x + radius, y);
                        ctx.arc(x, y, radius, startAngle, endAngle, false);

                        drawPixel(imgData, canvasWidth, x, y, 255, 0, 0, 255);

                        ctx.font = '5px sans-serif';
                        ctx.fillText('' + radius*2, x+4, y+4);
                    </text>
                }
                ctx.closePath(); // end

                ctx.lineWidth = 0.3;
                ctx.strokeStyle = "#0000ff";
                ctx.stroke();
                @* done drawing circles *@

                @* drawing lines *@
                ctx.beginPath(); // begin
                @foreach (var l in Model.Lines)
                {
                    <text>
                        var startX = @l.StartPoint.X.ToString(CultureInfo.InvariantCulture);
                        var startY = @l.StartPoint.Y.ToString(CultureInfo.InvariantCulture);
                        var endX = @l.EndPoint.X.ToString(CultureInfo.InvariantCulture);
                        var endY = @l.EndPoint.Y.ToString(CultureInfo.InvariantCulture);
                        
                        ctx.moveTo(startX, startY);
                        ctx.lineTo(endX, endY);
                    </text>
                }
                ctx.closePath(); // end

                ctx.lineWidth = 0.3;
                ctx.strokeStyle = "#44cc44";
                ctx.stroke();
                @* done drawing lines *@

                @* drawing arcs *@
                ctx.beginPath(); // begin
                @foreach (var a in Model.Arcs)
                {
                    <text>
                        var centerX = @a.Center.X.ToString(CultureInfo.InvariantCulture);
                        var centerY = @a.Center.Y.ToString(CultureInfo.InvariantCulture);
                        var radius = @a.Radius.ToString(CultureInfo.InvariantCulture);
                        var startAngle = @a.StartAngle.ToString(CultureInfo.InvariantCulture);
                        var endAngle = @a.EndAngle.ToString(CultureInfo.InvariantCulture);

                        var startX = (centerX + Math.cos(startAngle * Math.PI / 180) * radius);
                        var startY = (centerY + Math.sin(startAngle * Math.PI / 180) * radius);
                        var endX = (centerX + Math.cos(endAngle * Math.PI / 180) * radius);
                        var endY = (centerY + Math.sin(endAngle * Math.PI / 180) * radius);

                        @* since we are offsetting the y axis due to a different origin coordinate system, we have to also change direction *@
                        var isCounterClockwise = true;

                        ctx.moveTo(startX, startY);
                        ctx.arc(centerX, centerY, radius, startAngle * Math.PI / 180, endAngle * Math.PI / 180, isCounterClockwise);
                        ctx.moveTo(endX, endY);
                    </text>
                }
                ctx.closePath(); // end

                ctx.lineWidth = 0.3;
                ctx.strokeStyle = "#000000";
                ctx.stroke();
                @* done drawing lines *@

                @* drawing polylines  *@
                ctx.beginPath(); // begin
                @foreach (var p in Model.Polylines)
                {
                    for (int i = 0; i < p.Vertexes.Count; i++)
                    {
                        var vertex = p.Vertexes[i];
                        <text>                            
                            var pointX = @vertex.X.ToString(CultureInfo.InvariantCulture);
                            var pointY = @vertex.Y.ToString(CultureInfo.InvariantCulture);

                            @if (i == 0)
                            {   
                                <text>                               
                                ctx.moveTo(pointX, pointY);
                                </text>  
                            }
                            else {
                                <text> 
                                ctx.lineTo(pointX, pointY);                                
                                </text>
                            }
                        </text>
                    }                    
                }
                ctx.closePath(); // end

                ctx.lineWidth = 0.3;
                ctx.strokeStyle = "#ff00ff";
                ctx.stroke();
                @* done drawing polylines *@

                @* drawing polylines light weight *@
                ctx.beginPath(); // begin
                @foreach (var p in Model.PolylinesLW)
                {
                    for (int i = 0; i < p.Vertexes.Count; i++)
                    {
                        var vertex = p.Vertexes[i];
                        <text>                            
                            var pointX = @vertex.Position.X.ToString(CultureInfo.InvariantCulture);
                            var pointY = @vertex.Position.Y.ToString(CultureInfo.InvariantCulture);
                            var bulge = @vertex.Bulge.ToString(CultureInfo.InvariantCulture);
                            var prePointX = 0;
                            var prePointY = 0;

                            @if (i == 0)
                            {   
                                <text>                               
                                ctx.moveTo(pointX, pointY);
                                </text>  
                            }
                            else {
                                <text> 
                                double angle = 4 * Math.atan(Math.abs(bulge)) / Math.PI * 180;
                                double length = Math.sqrt((pointX - prePointX) * (pointX - prePointX) + (pointY - prePointY) * (pointY - prePointY));
                                double radius = Math.abs(length / (2 * Math.sin(angle / 360 * Math.PI)));
                                ctx.arc(pointX, pointY, radius, 0, angle * Math.PI / 180, false);

                                prePointX = pointX;
                                prePointY = pointY;
                                </text>
                            }
                        </text>
                    }                    
                }
                ctx.closePath(); // end

                ctx.lineWidth = 0.3;
                ctx.strokeStyle = "#002266";
                ctx.stroke();
                @* done drawing polylines light weight *@

                </text>
            }

            @* copy offscreen to onscreen *@
            off_ctx.putImageData(imgData, 0,0);
            ctx.drawImage(off_ctx.canvas, 0, 0);

            ctx.restore();
        }

        window.onload = function() {
            @* get on-screen canvas *@
            var canvas = document.getElementById('myCanvas');
            var canvasWidth = canvas.width;
            var canvasHeight = canvas.height;            

            var translatePos = {
                x: canvasWidth / 2,
                y: canvasHeight / 2
            };

            var scale = 1.0;
            var scaleMultiplier = 0.8;
            var startDragOffset = {};
            var mouseDown = false;

            // add event listeners to handle screen drag
            canvas.addEventListener("mousedown", function(evt){
                mouseDown = true;
                startDragOffset.x = evt.clientX - translatePos.x;
                startDragOffset.y = evt.clientY - translatePos.y;
            });

            canvas.addEventListener("mouseup", function(evt){
                mouseDown = false;
            });

            canvas.addEventListener("mouseover", function(evt){
                mouseDown = false;
            });

            canvas.addEventListener("mouseout", function(evt){
                mouseDown = false;
            });

            canvas.addEventListener("mousemove", function(evt){
                if (mouseDown) {
                    translatePos.x = evt.clientX - startDragOffset.x;
                    translatePos.y = evt.clientY - startDragOffset.y;
                    draw(scale, translatePos);
                }
            });
    
            var handleScroll = function(evt) {
                 // e is the mouse wheel event
                const x = evt.offsetX;
                const y = evt.offsetY;
                
                const amount = evt.wheelDelta > 0 ?  1.1 : 1 / 1.1; 

                scale *= amount;  // the new scale

                @* if (scale > 5) {
                    scale = 5;
                    amount = scale/5;
                } else if (scale < 0.5) {
                    scale = 0.5;
                    amount = scale*5;
                } *@

                // move the origin  
                translatePos.x = x - (x - translatePos.x) * amount;
                translatePos.y = y - (y - translatePos.y) * amount;
                
                draw(scale, translatePos);

                return evt.preventDefault() && false;
            };

            canvas.addEventListener('DOMMouseScroll',handleScroll,false);
            canvas.addEventListener('mousewheel',handleScroll,false);

            draw(scale, translatePos);
        };
    </script>
}